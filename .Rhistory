inputArgs=list(precision=3,numerator=13,denominator=12)
do.call(divRounded,inputArgs)
#using vectors:
inputArgs=c(denominator=12,numerator=13,precision=3)
do.call(divRounded,as.list(inputArgs))
# one input, and several output in simple data structure:
factors=function(number){
vectorOfAnswers=c() # empty vector that will collect output
for (i in 1:number){
#if the remainder of 'number'/'i' equals zero...
if ((number %% i) == 0){
# ...add 'i' to the vector of factors!
vectorOfAnswers=c(vectorOfAnswers,i)
}
}
return (vectorOfAnswers) # returning  the vector
}
factors(20)
double=function(x){
return (2*x)}
myVector=c(1,2,3)
double(myVector)
# Map returns a list, and the input can be a vector or a list
Map(double,myVector)
# mapply returns a vector, and the input can be a vector or a list
mapply(double,myVector)
drinkingAge= function(age){
if (age >= 21){
return (TRUE)
}else{
return (FALSE)}
}
###
agesVals=c(12,34,56,19,24,3)
Filter(drinkingAge,agesVals)
drinkingAge(agesVals)
drinkingAge= function(age){
return (age >= 21)
}
goodAges=c()
for(value in agesVals){
if (drinkingAge(value)){
goodAges=c(goodAges,value)
}
}
goodAges
numberA=c(10,20,30,40,50)
numberB=c(6,7,8,9,10)
dataDF=data.frame(numberA,numberB)
dataDF
# use a copy of the orginal
dataDF2=dataDF
# see the copy
dataDF2
for (column in 1:ncol(dataDF2)){
for (row in 1:nrow(dataDF2[column])){
dataDF2[row,column]=double(dataDF2[row,column])
}
}
# updated:
dataDF2
dataDF
double(dataDF)
dataDF
dataDF=double(dataDF)
# now see it:
dataDF
# recreating the data frame:
dataDF=data.frame(numberA,numberB)
lapply(dataDF,double)
# remember you are SEEING the result, but no changes to the orginal data frame!
as.data.frame(lapply(dataDF,double))
# you are adding the column values here:
as.data.frame(lapply(dataDF,sum))
accidents_reg[,Accident_Severity]=as.data.frame(lapply(accidents_reg[,Accident_Severity],
function(x)ifelse(x==3,1,x)))
accidents_reg=accidents[accidents$Accident_Severity!=1,]
accidents_reg[,Accident_Severity]=as.data.frame(lapply(accidents_reg[,Accident_Severity],
function(x)ifelse(x==3,1,x)))
accidents_reg[,Accident_Severity]
accidents_reg[,'Accident_Severity']=as.data.frame(lapply(accidents_reg[,Accident_Severity],
function(x)ifelse(x==3,1,x)))
accidents_reg[,'Accident_Severity']
accidents_reg[,'Accident_Severity']=as.data.frame(lapply(accidents_reg[,'Accident_Severity'],
function(x)ifelse(x==3,1,x)))
accidents_reg[,'Accident_Severity']=as.data.frame(apply(accidents_reg[,'Accident_Severity'],1,
function(x)ifelse(x==3,1,x)))
as.data.frame(apply(accidents_reg[,'Accident_Severity'],1,
function(x)ifelse(x==3,1,x)))
accidents_reg=accidents[accidents$Accident_Severity!=1,]
accidents_reg[,'Accident_Severity']=as.data.frame(apply(accidents_reg[,'Accident_Severity'],1,
function(x)ifelse(x==3,1,x)))
accidents_reg$Accident_Severity=ifelse(x==3,1,x)
accidents_reg$Accident_Severity=ifelse(accidents_reg$Accident_Severity==3,1,2)
accidents_reg$Accident_Severity=function(x)ifelse(x==3,1,x)
accidents_reg[,'Accident_Severity']=as.data.frame(lpply(accidents_reg[,'Accident_Severity'],
function(x)ifelse(x==3,1,x)))
accidents_reg[,'Accident_Severity']=as.data.frame(lapply(accidents_reg[,'Accident_Severity'],
function(x)ifelse(x==3,1,x)))
as.data.frame(lapply(dataDF,function(x){
return (2*x)}))
as.data.frame(lapply(dataDF,function(x)2*x))
as.data.frame(lapply(dataDF,function(x)ifelse(x<=10),2*x,x))
as.data.frame(lapply(dataDF,function(x)ifelse(x<=10,2*x,x))
.
as.data.frame(lapply(dataDF,function(x)ifelse(x<=10,2*x,x)))
as.data.frame(lapply(accidents_reg[,'Accident_Severity'],
function(x)ifelse(x==3,1,x)))
accidents_reg=accidents[accidents$Accident_Severity!=1,]
as.data.frame(lapply(dataDF[,1],function(x)ifelse(x<=10,2*x,x)))
as.data.frame(lapply(accidents_reg[,'Accident_Severity'],
function(x)ifelse(x==3,1,x)))
accidents_reg[,'Accident_Severity']=as.data.frame(lapply(accidents_reg[,'Accident_Severity'],
function(x)ifelse(x==3,1,x)))
dataDF[,1]=as.data.frame(lapply(dataDF[,1],function(x)ifelse(x<=10,2*x,x)))
dataDF[,c(1,2)]=as.data.frame(lapply(dataDF[,c(1,2)],function(x)ifelse(x<=10,2*x,x)))
dataDF
for (x in length(accidents_reg$Accident_Severity)) {
if(accidents[x,'Accident_Severity']==3)accidents[x,'Accident_Severity']=1
}
accidents<-read.csv('dftRoadSafety_Accidents_2016.csv',stringsAsFactors = F)
accidents_EDA=accidents
accidents_map=accidents
accidents_reg=accidents
vehicle_reg=vehicle
for (x in length(accidents_reg$Accident_Severity)) {
if(accidents_reg[x,'Accident_Severity']==3)accidents_reg[x,'Accident_Severity']=1
}
accidents_reg=accidents[accidents$Accident_Severity!=1,]
for (x in length(accidents_reg$Accident_Severity)) {
if(accidents_reg[x,'Accident_Severity']==3)accidents_reg[x,'Accident_Severity']=1
}
x=1
for (x in length(accidents_reg$Accident_Severity)) {
if(accidents_reg[x,'Accident_Severity']==3)accidents_reg[x,'Accident_Severity']=1
}
x=1
for (x in 1:length(accidents_reg$Accident_Severity)) {
if(accidents_reg[x,'Accident_Severity']==3)accidents_reg[x,'Accident_Severity']=1
}
accidents_reg$Accident_Severity=accidents_reg$Accident_Severity-1
barplot(table(accidents_reg$Accident_Severity))
vehicle_reg=select(vehicle,Accident_Index,Sex_of_Driver,Age_of_Driver,Age_of_Vehicle)
vehicle_reg=vehicle_reg[vehicle_reg$Sex_of_Driver%in%c(1,2)&vehicle_reg$Age_of_Driver!=-1&vehicle_reg$Age_of_Vehicle!=-1,] #include only Male and Female and valid age
vehicle_reg$Sex_of_Driver=vehicle_reg$Sex_of_Driver-1 #recode Male as 0, Female as 1
accidents_sex=aggregate(list(Avg_Sex_of_Driver=vehicle_reg$Sex_of_Driver),list(Accident_Index=vehicle_reg$Accident_Index),mean)
accidents_driverAge=aggregate(list(Avg_Age_of_Driver=vehicle_reg$Age_of_Driver),list(Accident_Index=vehicle_reg$Accident_Index),mean)
accidents_vehicleAge=aggregate(list(Avg_Age_of_Vehicle=vehicle_reg$Age_of_Vehicle),list(Accident_Index=vehicle_reg$Accident_Index),mean)
accidents_reg=merge(accidents_reg,accidents_sex)
merge=merge(accidents_driverAge,accidents_vehicleAge)
accidents_reg=merge(accidents_reg,merge)
accidents_reg=select(accidents_reg,Accident_Index,Accident_Severity,Avg_Sex_of_Driver,Avg_Age_of_Driver,Avg_Age_of_Vehicle)
# function 'glm' !
LogitEPI_a =glm(Accident_Severity ~ Avg_Sex_of_Driver + Avg_Age_of_Driver + Avg_Age_of_Vehicle,
data = accidents_reg,
family = binomial())
# see full results: summary(LogitEPI_a)
# see relevant info on coefficients:
results_a=coef(summary(LogitEPI_a))
data.frame(CoefficientExp=exp(results_a[,1]),Significant=results_a[,4]<0.05)
# remember that presscat is factor
LogitEPI_b=glm(Accident_Severity ~ Avg_Age_of_Driver + Avg_Age_of_Vehicle,
data = accidents_reg,
family = binomial())
results_b=coef(summary(LogitEPI_b))
data.frame(CoefficientExp=exp(results_b[,1]),Significant=results_b[,4]<0.05)
if (LogitEPI_a$aic < LogitEPI_b$aic){
print("model 'a' is better")
}else{print("model 'b' is better")}
actualValues=accidents_reg$Accident_Severity
predictedValues=predict(LogitEPI_a, type = 'response')
library(InformationValue)
cm=confusionMatrix(actualValues, predictedValues)
row.names(cm)=c('PredictedNegative','PredictedPositive')
confusionMatrix(actualValues, predictedValues)
predict(LogitEPI_a, type = 'response')
predictedValues=predict(LogitEPI_a, type = 'response')
actualValues=indexes$environmentCat
corruptLink='https://raw.githubusercontent.com/EvansDataScience/data/master/corruption.csv'
econoLink='https://raw.githubusercontent.com/EvansDataScience/data/master/economic.csv'
enviroLink='https://raw.githubusercontent.com/EvansDataScience/data/master/environment.csv'
pressLink='https://raw.githubusercontent.com/EvansDataScience/data/master/pressfreedom.csv'
corrupt=read.csv(corruptLink,stringsAsFactors = F)
econo=read.csv(econoLink,stringsAsFactors = F)
enviro=read.csv(enviroLink,stringsAsFactors = F)
press=read.csv(pressLink,stringsAsFactors = F)
indexes1=merge(corrupt,econo)
indexes2=merge(press,enviro)
indexes=merge(indexes1,indexes2)
actualValues=indexes$environmentCat
predictedValues=predict(LogitEPI_a, type = 'response')
library(InformationValue)
cm=confusionMatrix(actualValues, predictedValues)
confusionMatrix(actualValues, predictedValues)
corruptLink='https://raw.githubusercontent.com/EvansDataScience/data/master/corruption.csv'
econoLink='https://raw.githubusercontent.com/EvansDataScience/data/master/economic.csv'
enviroLink='https://raw.githubusercontent.com/EvansDataScience/data/master/environment.csv'
pressLink='https://raw.githubusercontent.com/EvansDataScience/data/master/pressfreedom.csv'
corrupt=read.csv(corruptLink,stringsAsFactors = F)
econo=read.csv(econoLink,stringsAsFactors = F)
enviro=read.csv(enviroLink,stringsAsFactors = F)
press=read.csv(pressLink,stringsAsFactors = F)
indexes1=merge(corrupt,econo)
indexes2=merge(press,enviro)
indexes=merge(indexes1,indexes2)
str(indexes)
summary(indexes)
library(psych)
indexes$scorepressOK=reverse.code(-1,indexes$scorepress)
indexes$presscat=as.factor(indexes$presscat)
indexes$environmentCat=as.factor(indexes$environmentCat)
hist(indexes$environment)
explanans=names(indexes)[c(3,4,9)]
for (x in explanans){
par=cbind(indexes[,x],indexes$environment)
p=cor.test(indexes[,x],indexes$environment)
print(paste("Pearson:",p$estimate," - Is significative?",p$p.value<0.05))
}
cor(indexes[explanans])
row.names(indexes)=indexes$Country
LinRegEPI = lm(environment ~ corruptionIndex + scoreEconomy + scorepressOK,
data = indexes)
summary(LinRegEPI)
results=coef(summary(LinRegEPI))
data.frame(Coefficient=results[,1],Significant=results[,4]<0.05)
summary(LinRegEPI)$adj.r.squared # from 0 to 1, the closer to 1 the better.
library(car)
influencePlot(LinRegEPI,
id.method="noteworthy",
id.n=3,
main="Identifying outliers",
sub="Circle size is proportial to Cook's Distance" )
library(MASS)
LinRegEPI_R = rlm(environment ~ corruptionIndex + scoreEconomy + scorepressOK,
data = indexes)
#summary(rr)
results=coef(summary(LinRegEPI_R))
data.frame(Coefficient=results[,1],Significant=abs(results[,3])>2)
# The function 'relevel' CAN NOT accept ordinals. This is why I did not set it as ordinal before.
# This variable has 3 levels. Let's choose 'High' as the reference.
indexes$presscat <- relevel(indexes$presscat, ref = "High")
LinRegEPI_catX <- lm(environment ~ corruptionIndex + scoreEconomy + presscat,
data = indexes)
results=coef(summary(LinRegEPI_catX))
data.frame(Coefficient=results[,1],Significant=results[,4]<0.05)
summary(LinRegEPI_catX)$adj.r.squared
barplot(table(indexes$environmentCat))
# function 'glm' !
LogitEPI_a =glm(environmentCat ~ corruptionIndex + scoreEconomy + scorepressOK,
data = indexes,
family = binomial())
# see full results: summary(LogitEPI_a)
# see relevant info on coefficients:
results=coef(summary(LogitEPI_a))
data.frame(CoefficientExp=exp(results[,1]),Significant=results[,4]<0.05)
# remember that presscat is factor
LogitEPI_b =glm(environmentCat ~ corruptionIndex + scoreEconomy + presscat,
data = indexes,
family = binomial())
results=coef(summary(LogitEPI_b))
data.frame(CoefficientExp=exp(results[,1]),Significant=results[,4]<0.05)
if (LogitEPI_a$aic < LogitEPI_b$aic){
print("model 'a' is better")
}else{print("model 'b' is better")}
actualValues=indexes$environmentCat
predictedValues=predict(LogitEPI_a, type = 'response')
library(InformationValue)
cm=confusionMatrix(actualValues, predictedValues)
row.names(cm)=c('PredictedNegative','PredictedPositive')
colnames(cm)=c('ActualNegative','ActualPositive')
cm
confusionMatrix(actualValues, predictedValues)
accidents_reg=accidents[accidents$Accident_Severity!=1,]
accidents_reg$Accident_Severity=accidents_reg$Accident_Severity-2
accidents_reg=merge(accidents_reg,accidents_sex)
merge=merge(accidents_driverAge,accidents_vehicleAge)
accidents_reg=merge(accidents_reg,merge)
accidents_reg=select(accidents_reg,Accident_Index,Accident_Severity,Avg_Sex_of_Driver,Avg_Age_of_Driver,Avg_Age_of_Vehicle)
vehicle_reg=select(vehicle,Accident_Index,Sex_of_Driver,Age_of_Driver,Age_of_Vehicle)
accidents_reg=accidents[accidents$Accident_Severity!=1,]
accidents_reg$Accident_Severity=accidents_reg$Accident_Severity-2
vehicle_reg=select(vehicle,Accident_Index,Sex_of_Driver,Age_of_Driver,Age_of_Vehicle)
accidents<-read.csv('dftRoadSafety_Accidents_2016.csv',stringsAsFactors = F)
accidents_reg=accidents
accidents_reg=accidents[accidents$Accident_Severity!=1,]
accidents_reg$Accident_Severity=accidents_reg$Accident_Severity-2
e
vehicle<-read.csv('Veh.csv',stringsAsFactors = F)
vehicle_reg=select(vehicle,Accident_Index,Sex_of_Driver,Age_of_Driver,Age_of_Vehicle)
vehicle_reg=select(vehicle,Accident_Index,Sex_of_Driver,Age_of_Driver,Age_of_Vehicle)
rm(list=ls())
accidents<-read.csv('dftRoadSafety_Accidents_2016.csv',stringsAsFactors = F)
accidents<-read.csv('dftRoadSafety_Accidents_2016.csv',stringsAsFactors = F)
casualty<-read.csv('Cas.csv',stringsAsFactors = F)
accidents<-read.csv('dftRoadSafety_Accidents_2016.csv',stringsAsFactors = F)
casualty<-read.csv('Cas.csv',stringsAsFactors = F)
vehicle<-read.csv('Veh.csv',stringsAsFactors = F)
guide_lad<-read_excel('Road Accident Safety Data Guide.xls', sheet=6)
pop<-read_excel('ukmidyearpopest2016.xls',sheet=5,skip=4)
accidents_reg=accidents
vehicle_reg=vehicle
accidents_reg=accidents[accidents$Accident_Severity!=1,]
accidents_reg$Accident_Severity=accidents_reg$Accident_Severity-2
vehicle_reg=select(vehicle,Accident_Index,Sex_of_Driver,Age_of_Driver,Age_of_Vehicle)
vehicle_reg=select(vehicle_reg,Accident_Index,Sex_of_Driver,Age_of_Driver,Age_of_Vehicle)
vehicle_reg=dplyr::select(vehicle,Accident_Index,Sex_of_Driver,Age_of_Driver,Age_of_Vehicle)
vehicle_reg=vehicle_reg[vehicle_reg$Sex_of_Driver%in%c(1,2)&vehicle_reg$Age_of_Driver!=-1&vehicle_reg$Age_of_Vehicle!=-1,] #include only Male and Female and valid age
vehicle_reg$Sex_of_Driver=vehicle_reg$Sex_of_Driver-1 #recode Male as 0, Female as 1
accidents_sex=aggregate(list(Avg_Sex_of_Driver=vehicle_reg$Sex_of_Driver),list(Accident_Index=vehicle_reg$Accident_Index),mean)
accidents_driverAge=aggregate(list(Avg_Age_of_Driver=vehicle_reg$Age_of_Driver),list(Accident_Index=vehicle_reg$Accident_Index),mean)
accidents_vehicleAge=aggregate(list(Avg_Age_of_Vehicle=vehicle_reg$Age_of_Vehicle),list(Accident_Index=vehicle_reg$Accident_Index),mean)
accidents_reg=dplyr::select(accidents_reg,Accident_Index,Accident_Severity,Avg_Sex_of_Driver,Avg_Age_of_Driver,Avg_Age_of_Vehicle)
accidents_sex=aggregate(list(Avg_Sex_of_Driver=vehicle_reg$Sex_of_Driver),list(Accident_Index=vehicle_reg$Accident_Index),mean)
accidents_driverAge=aggregate(list(Avg_Age_of_Driver=vehicle_reg$Age_of_Driver),list(Accident_Index=vehicle_reg$Accident_Index),mean)
accidents_vehicleAge=aggregate(list(Avg_Age_of_Vehicle=vehicle_reg$Age_of_Vehicle),list(Accident_Index=vehicle_reg$Accident_Index),mean)
accidents_reg=merge(accidents_reg,accidents_sex)
merge=merge(accidents_driverAge,accidents_vehicleAge)
accidents_reg=merge(accidents_reg,merge)
accidents_reg=dplyr::select(accidents_reg,Accident_Index,Accident_Severity,Avg_Sex_of_Driver,Avg_Age_of_Driver,Avg_Age_of_Vehicle)
# function 'glm' !
LogitEPI_a =glm(Accident_Severity ~ Avg_Sex_of_Driver + Avg_Age_of_Driver + Avg_Age_of_Vehicle,
data = accidents_reg,
family = binomial())
# see full results: summary(LogitEPI_a)
# see relevant info on coefficients:
results_a=coef(summary(LogitEPI_a))
data.frame(CoefficientExp=exp(results_a[,1]),Significant=results_a[,4]<0.05)
# remember that presscat is factor
LogitEPI_b=glm(Accident_Severity ~ Avg_Age_of_Driver + Avg_Age_of_Vehicle,
data = accidents_reg,
family = binomial())
results_b=coef(summary(LogitEPI_b))
data.frame(CoefficientExp=exp(results_b[,1]),Significant=results_b[,4]<0.05)
if (LogitEPI_a$aic < LogitEPI_b$aic){
print("model 'a' is better")
}else{print("model 'b' is better")}
actualValues=accidents_reg$Accident_Severity
predictedValues=predict(LogitEPI_a, type = 'response')
library(InformationValue)
cm=confusionMatrix(actualValues, predictedValues)
row.names(cm)=c('PredictedNegative','PredictedPositive')
confusionMatrix(actualValues, predictedValues)
# remember that presscat is factor
LogitEPI_b=glm(Accident_Severity ~ Avg_Sex_of_Driver,data = accidents_reg,
family = binomial())
results_b=coef(summary(LogitEPI_b))
data.frame(CoefficientExp=exp(results_b[,1]),Significant=results_b[,4]<0.05)
if (LogitEPI_a$aic < LogitEPI_b$aic){
print("model 'a' is better")
}else{print("model 'b' is better")}
LogitEPI_a$aic
LogitEPI_b$aic
if (LogitEPI_a$aic < LogitEPI_b$aic){
print("model 'a' is better")
}else{print("model 'b' is better")}
accidents_reg$Accident_Severity
corruptLink='https://raw.githubusercontent.com/EvansDataScience/data/master/corruption.csv'
econoLink='https://raw.githubusercontent.com/EvansDataScience/data/master/economic.csv'
enviroLink='https://raw.githubusercontent.com/EvansDataScience/data/master/environment.csv'
pressLink='https://raw.githubusercontent.com/EvansDataScience/data/master/pressfreedom.csv'
corrupt=read.csv(corruptLink,stringsAsFactors = F)
econo=read.csv(econoLink,stringsAsFactors = F)
enviro=read.csv(enviroLink,stringsAsFactors = F)
press=read.csv(pressLink,stringsAsFactors = F)
indexes1=merge(corrupt,econo)
indexes2=merge(press,enviro)
indexes=merge(indexes1,indexes2)
indexes$environmentCat
predict(LogitEPI_a, type = 'response')
predict(LogitEPI_a, type = 'response')
confusionMatrix(actualValues, predictedValues)
actualValues=indexes$environmentCat
predictedValues=predict(LogitEPI_a, type = 'response')
confusionMatrix(actualValues, predictedValues)
actualValues=indexes$environmentCat
predictedValues=predict(LogitEPI_a, type = 'response')
# function 'glm' !
LogitSev_a =glm(Accident_Severity ~ Avg_Sex_of_Driver + Avg_Age_of_Driver + Avg_Age_of_Vehicle,
data = accidents_reg,
family = binomial())
# see full results: summary(LogitEPI_a)
# see relevant info on coefficients:
results_a=coef(summary(LogitEPI_a))
data.frame(CoefficientExp=exp(results_a[,1]),Significant=results_a[,4]<0.05)
# remember that presscat is factor
LogitSev_b=glm(Accident_Severity ~ Avg_Sex_of_Driver,data = accidents_reg,
family = binomial())
results_b=coef(summary(LogitEPI_b))
data.frame(CoefficientExp=exp(results_b[,1]),Significant=results_b[,4]<0.05)
if (LogitSev_a$aic < LogitSev_b$aic){
print("model 'a' is better")
}else{print("model 'b' is better")}
actualValues=accidents_reg$Accident_Severity
predictedValues=predict(LogitSev_a, type = 'response')
library(InformationValue)
cm=confusionMatrix(actualValues, predictedValues)
row.names(cm)=c('PredictedNegative','PredictedPositive')
confusionMatrix(actualValues, predictedValues)
actualValues=indexes$environmentCat
predictedValues=predict(LogitEPI_a, type = 'response')
# function 'glm' !
LogitEPI_a =glm(environmentCat ~ corruptionIndex + scoreEconomy + scorepressOK,
data = indexes,
family = binomial())
corrupt=read.csv(corruptLink,stringsAsFactors = F)
econo=read.csv(econoLink,stringsAsFactors = F)
enviro=read.csv(enviroLink,stringsAsFactors = F)
press=read.csv(pressLink,stringsAsFactors = F)
indexes1=merge(corrupt,econo)
indexes2=merge(press,enviro)
indexes=merge(indexes1,indexes2)
library(psych)
indexes$scorepressOK=reverse.code(-1,indexes$scorepress)
indexes$presscat=as.factor(indexes$presscat)
indexes$environmentCat=as.factor(indexes$environmentCat)
accidents_reg$Accident_Severity=as.factor(accidents_reg$Accident_Severity)
barplot(table(accidents_reg$Accident_Severity))
# function 'glm' !
LogitSev_a =glm(Accident_Severity ~ Avg_Sex_of_Driver + Avg_Age_of_Driver + Avg_Age_of_Vehicle,
data = accidents_reg,
family = binomial())
# see full results: summary(LogitEPI_a)
# see relevant info on coefficients:
results_a=coef(summary(LogitEPI_a))
data.frame(CoefficientExp=exp(results_a[,1]),Significant=results_a[,4]<0.05)
# function 'glm' !
LogitSev_a =glm(Accident_Severity ~ Avg_Sex_of_Driver + Avg_Age_of_Driver + Avg_Age_of_Vehicle,
data = accidents_reg,
family = binomial())
# see full results: summary(LogitEPI_a)
# see relevant info on coefficients:
results_a=coef(summary(LogitEPI_a))
data.frame(CoefficientExp=exp(results_a[,1]),Significant=results_a[,4]<0.05)
# remember that presscat is factor
LogitSev_b=glm(Accident_Severity ~ Avg_Sex_of_Driver,data = accidents_reg,
family = binomial())
results_b=coef(summary(LogitEPI_b))
data.frame(CoefficientExp=exp(results_b[,1]),Significant=results_b[,4]<0.05)
if (LogitSev_a$aic < LogitSev_b$aic){
print("model 'a' is better")
}else{print("model 'b' is better")}
library(InformationValue)
cm=confusionMatrix(actualValues, predictedValues)
actualValues=accidents_reg$Accident_Severity
predictedValues=predict(LogitSev_a, type = 'response')
library(InformationValue)
cm=confusionMatrix(actualValues, predictedValues)
row.names(cm)=c('PredictedNegative','PredictedPositive')
indexes$environmentCat=as.factor(indexes$environmentCat)
hist(indexes$environment)
# function 'glm' !
LogitEPI_a =glm(environmentCat ~ corruptionIndex + scoreEconomy + scorepressOK,
data = indexes,
family = binomial())
# see full results: summary(LogitEPI_a)
# see relevant info on coefficients:
results=coef(summary(LogitEPI_a))
data.frame(CoefficientExp=exp(results[,1]),Significant=results[,4]<0.05)
# remember that presscat is factor
LogitEPI_b =glm(environmentCat ~ corruptionIndex + scoreEconomy + presscat,
data = indexes,
family = binomial())
results=coef(summary(LogitEPI_b))
data.frame(CoefficientExp=exp(results[,1]),Significant=results[,4]<0.05)
if (LogitEPI_a$aic < LogitEPI_b$aic){
print("model 'a' is better")
}else{print("model 'b' is better")}
actualValues=indexes$environmentCat
predictedValues=predict(LogitEPI_a, type = 'response')
library(InformationValue)
cm=confusionMatrix(actualValues, predictedValues)
row.names(cm)=c('PredictedNegative','PredictedPositive')
colnames(cm)=c('ActualNegative','ActualPositive')
cm
actualValues=accidents_reg$Accident_Severity
predictedValues=predict(LogitSev_a, type = 'response')
actualValues=indexes$environmentCat
predictedValues=predict(LogitEPI_a, type = 'response')
summary(LogitSev_a)
# function 'glm' !
LogitSev_a =glm(Accident_Severity ~ Avg_Sex_of_Driver + Avg_Age_of_Driver + Avg_Age_of_Vehicle,
data = accidents_reg,
family = binomial())
# see full results: summary(LogitSev_a)
# see relevant info on coefficients:
results_a=coef(summary(LogitSev_a))
data.frame(CoefficientExp=exp(results_a[,1]),Significant=results_a[,4]<0.05)
# remember that presscat is factor
LogitSev_b=glm(Accident_Severity ~ Avg_Sex_of_Driver,data = accidents_reg,
family = binomial())
results_b=coef(summary(LogitSev_b))
data.frame(CoefficientExp=exp(results_b[,1]),Significant=results_b[,4]<0.05)
if (LogitSev_a$aic < LogitSev_b$aic){
print("model 'a' is better")
}else{print("model 'b' is better")}
predictedValues=predict(LogitSev_a, type = 'response')
confusionMatrix(actualValues, predictedValues)
actualValues=accidents_reg$Accident_Severity
predictedValues=predict(LogitSev_a, type = 'response')
confusionMatrix(actualValues, predictedValues)
predictedValues=predict(LogitEPI_a, type = 'response')
predictedValues=predict(LogitSev_a, type = 'response')
predictedValues=predict(LogitEPI_a, type = 'response')
predictedValues=as.numeric(predict(LogitSev_a, type = 'response'))
confusionMatrix(actualValues, predictedValues)
LogitSev_a =glm(Accident_Severity ~ Avg_Sex_of_Driver + Avg_Age_of_Driver + Avg_Age_of_Vehicle,
data = accidents_reg,
family = binomial())
predictedValues=as.numeric(predict(LogitSev_a, type = 'response'))
confusionMatrix(actualValues, predictedValues)
misClassError(actualValues, predictedValues)
plotROC(actualValues, predictedValues)
